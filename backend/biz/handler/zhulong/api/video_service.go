// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "github.com/manteia/zhulong/biz/model/zhulong/api"
	"github.com/manteia/zhulong/biz/service"
)

// 全局视频服务实例
var videoService *service.VideoService

// init 初始化服务
func init() {
	var err error
	videoService, err = service.NewVideoService()
	if err != nil {
		panic(fmt.Sprintf("初始化视频服务失败: %v", err))
	}
}

// UploadVideo .
// @router /api/v1/videos [POST]
func UploadVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.VideoUploadRequest
	
	// 获取标题和描述
	title := c.PostForm("title")
	description := c.PostForm("description")
	
	if title != "" {
		req.Title = title
	}
	if description != "" {
		req.Description = description
	}

	// 获取上传的文件
	fileHeader, err := c.FormFile("file")
	if err != nil {
		c.JSON(consts.StatusBadRequest, &api.VideoUploadResponse{
			Base: &api.BaseResponse{
				Code:    1001,
				Message: "获取上传文件失败: " + err.Error(),
			},
		})
		return
	}

	// 调用服务层处理上传
	resp, err := videoService.UploadVideo(ctx, &req, fileHeader)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.VideoUploadResponse{
			Base: &api.BaseResponse{
				Code:    5000,
				Message: "服务器内部错误: " + err.Error(),
			},
		})
		return
	}

	// 根据业务逻辑返回相应的HTTP状态码
	if resp.Base.Code == 0 {
		c.JSON(consts.StatusOK, resp)
	} else {
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// GetVideoList .
// @router /api/v1/videos [GET]
func GetVideoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.VideoListRequest
	
	// 手动绑定查询参数，避免处理表单数据
	if pageStr := c.Query("page"); pageStr != "" {
		if page, err := strconv.Atoi(pageStr); err == nil {
			req.Page = int32(page)
		}
	}
	if limitStr := c.Query("limit"); limitStr != "" {
		if limit, err := strconv.Atoi(limitStr); err == nil {
			req.PageSize = int32(limit)
		}
	}
	if pageSizeStr := c.Query("page_size"); pageSizeStr != "" {
		if pageSize, err := strconv.Atoi(pageSizeStr); err == nil {
			req.PageSize = int32(pageSize)
		}
	}
	req.Search = c.Query("search")
	req.SortBy = c.Query("sort_by")
	req.SortOrder = c.Query("sort_order")

	// 调用服务层处理
	resp, err := videoService.GetVideoList(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.VideoListResponse{
			Base: &api.BaseResponse{
				Code:    5000,
				Message: "服务器内部错误: " + err.Error(),
			},
			Videos: []*api.Video{},
			Total:  0,
		})
		return
	}

	// 返回响应
	if resp.Base.Code == 0 {
		c.JSON(consts.StatusOK, resp)
	} else {
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// GetVideoDetail .
// @router /api/v1/videos/:video_id [GET]
func GetVideoDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.VideoDetailRequest
	
	// 从路径参数获取video_id
	videoID := c.Param("video_id")
	req.VideoID = videoID
	
	// 不需要BindAndValidate，因为只有路径参数
	if videoID == "" {
		c.JSON(consts.StatusBadRequest, &api.VideoDetailResponse{
			Base: &api.BaseResponse{
				Code:    2000,
				Message: "路径参数video_id不能为空",
			},
			Video: nil,
		})
		return
	}

	// 调用服务层处理
	resp, err := videoService.GetVideoDetail(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.VideoDetailResponse{
			Base: &api.BaseResponse{
				Code:    5000,
				Message: "服务器内部错误: " + err.Error(),
			},
			Video: nil,
		})
		return
	}

	// 根据业务逻辑返回相应的HTTP状态码
	if resp.Base.Code == 0 {
		c.JSON(consts.StatusOK, resp)
	} else if resp.Base.Code == 3001 {
		// 视频不存在，返回404
		c.JSON(consts.StatusNotFound, resp)
	} else {
		// 其他业务错误，返回400
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// GetVideoPlayURL .
// @router /api/v1/videos/:video_id/play [GET]
func GetVideoPlayURL(ctx context.Context, c *app.RequestContext) {
	var req api.VideoPlayURLRequest
	
	// 从路径参数获取video_id
	videoID := c.Param("video_id")
	req.VideoID = videoID
	
	// 从查询参数获取expire_seconds（可选）
	expireSecondsStr := c.DefaultQuery("expire_seconds", "3600") // 默认3600秒
	if expireSecondsStr != "" {
		if expireSeconds, err := strconv.ParseInt(expireSecondsStr, 10, 32); err == nil {
			req.ExpireSeconds = int32(expireSeconds)
		} else {
			c.JSON(consts.StatusBadRequest, &api.VideoPlayURLResponse{
				Base: &api.BaseResponse{
					Code:    4000,
					Message: "expire_seconds参数格式错误: " + err.Error(),
				},
				PlayURL:   "",
				ExpiresAt: 0,
			})
			return
		}
	} else {
		req.ExpireSeconds = 3600 // 默认1小时
	}

	// 基本参数验证
	if videoID == "" {
		c.JSON(consts.StatusBadRequest, &api.VideoPlayURLResponse{
			Base: &api.BaseResponse{
				Code:    4000,
				Message: "路径参数video_id不能为空",
			},
			PlayURL:   "",
			ExpiresAt: 0,
		})
		return
	}

	// 调用服务层处理
	resp, err := videoService.GetVideoPlayURL(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.VideoPlayURLResponse{
			Base: &api.BaseResponse{
				Code:    5000,
				Message: "服务器内部错误: " + err.Error(),
			},
			PlayURL:   "",
			ExpiresAt: 0,
		})
		return
	}

	// 根据业务逻辑返回相应的HTTP状态码
	if resp.Base.Code == 0 {
		c.JSON(consts.StatusOK, resp)
	} else if resp.Base.Code == 4001 {
		// 视频不存在，返回404
		c.JSON(consts.StatusNotFound, resp)
	} else {
		// 其他业务错误，返回400
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// DeleteVideo .
// @router /api/v1/videos/:video_id [DELETE]
func DeleteVideo(ctx context.Context, c *app.RequestContext) {
	var req api.VideoDeleteRequest
	
	// 从路径参数获取video_id
	videoID := c.Param("video_id")
	req.VideoID = videoID
	
	// 基本参数验证
	if videoID == "" {
		c.JSON(consts.StatusBadRequest, &api.VideoDeleteResponse{
			Base: &api.BaseResponse{
				Code:    5000,
				Message: "路径参数video_id不能为空",
			},
		})
		return
	}

	// 调用服务层处理
	resp, err := videoService.DeleteVideo(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.VideoDeleteResponse{
			Base: &api.BaseResponse{
				Code:    5000,
				Message: "服务器内部错误: " + err.Error(),
			},
		})
		return
	}

	// 根据业务逻辑返回相应的HTTP状态码
	if resp.Base.Code == 0 {
		c.JSON(consts.StatusOK, resp)
	} else if resp.Base.Code == 5001 {
		// 视频不存在，返回404
		c.JSON(consts.StatusNotFound, resp)
	} else {
		// 其他业务错误，返回400
		c.JSON(consts.StatusBadRequest, resp)
	}
}
