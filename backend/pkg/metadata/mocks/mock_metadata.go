// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/metadata/metadata.go
//
// Generated by this command:
//
//	mockgen -source=pkg/metadata/metadata.go -destination=pkg/metadata/mocks/mock_metadata.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	metadata "github.com/manteia/zhulong/pkg/metadata"
	gomock "go.uber.org/mock/gomock"
)

// MockMetadataServiceInterface is a mock of MetadataServiceInterface interface.
type MockMetadataServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServiceInterfaceMockRecorder
}

// MockMetadataServiceInterfaceMockRecorder is the mock recorder for MockMetadataServiceInterface.
type MockMetadataServiceInterfaceMockRecorder struct {
	mock *MockMetadataServiceInterface
}

// NewMockMetadataServiceInterface creates a new mock instance.
func NewMockMetadataServiceInterface(ctrl *gomock.Controller) *MockMetadataServiceInterface {
	mock := &MockMetadataServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMetadataServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataServiceInterface) EXPECT() *MockMetadataServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteMetadata mocks base method.
func (m *MockMetadataServiceInterface) DeleteMetadata(ctx context.Context, fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetadata", ctx, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetadata indicates an expected call of DeleteMetadata.
func (mr *MockMetadataServiceInterfaceMockRecorder) DeleteMetadata(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetadata", reflect.TypeOf((*MockMetadataServiceInterface)(nil).DeleteMetadata), ctx, fileID)
}

// GetMetadata mocks base method.
func (m *MockMetadataServiceInterface) GetMetadata(ctx context.Context, fileID string) (*metadata.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, fileID)
	ret0, _ := ret[0].(*metadata.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockMetadataServiceInterfaceMockRecorder) GetMetadata(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetadataServiceInterface)(nil).GetMetadata), ctx, fileID)
}

// ListMetadata mocks base method.
func (m *MockMetadataServiceInterface) ListMetadata(ctx context.Context, req *metadata.ListMetadataRequest) (*metadata.ListMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadata", ctx, req)
	ret0, _ := ret[0].(*metadata.ListMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadata indicates an expected call of ListMetadata.
func (mr *MockMetadataServiceInterfaceMockRecorder) ListMetadata(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadata", reflect.TypeOf((*MockMetadataServiceInterface)(nil).ListMetadata), ctx, req)
}

// SaveMetadata mocks base method.
func (m *MockMetadataServiceInterface) SaveMetadata(ctx context.Context, metadata *metadata.FileMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetadata", ctx, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetadata indicates an expected call of SaveMetadata.
func (mr *MockMetadataServiceInterfaceMockRecorder) SaveMetadata(ctx, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetadata", reflect.TypeOf((*MockMetadataServiceInterface)(nil).SaveMetadata), ctx, metadata)
}
