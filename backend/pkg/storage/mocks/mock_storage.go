// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/storage/interface.go -destination=pkg/storage/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	storage "github.com/manteia/zhulong/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockStorageInterface) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockStorageInterfaceMockRecorder) BucketExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockStorageInterface)(nil).BucketExists), ctx, bucketName)
}

// CreateBucket mocks base method.
func (m *MockStorageInterface) CreateBucket(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockStorageInterfaceMockRecorder) CreateBucket(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockStorageInterface)(nil).CreateBucket), ctx, bucketName)
}

// DeleteFile mocks base method.
func (m *MockStorageInterface) DeleteFile(ctx context.Context, bucketName, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, bucketName, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockStorageInterfaceMockRecorder) DeleteFile(ctx, bucketName, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockStorageInterface)(nil).DeleteFile), ctx, bucketName, objectName)
}

// DownloadFile mocks base method.
func (m *MockStorageInterface) DownloadFile(ctx context.Context, bucketName, objectName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, bucketName, objectName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockStorageInterfaceMockRecorder) DownloadFile(ctx, bucketName, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockStorageInterface)(nil).DownloadFile), ctx, bucketName, objectName)
}

// FileExists mocks base method.
func (m *MockStorageInterface) FileExists(ctx context.Context, bucketName, objectName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", ctx, bucketName, objectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists.
func (mr *MockStorageInterfaceMockRecorder) FileExists(ctx, bucketName, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockStorageInterface)(nil).FileExists), ctx, bucketName, objectName)
}

// GeneratePresignedURL mocks base method.
func (m *MockStorageInterface) GeneratePresignedURL(ctx context.Context, bucketName, objectName string, expiry time.Duration, method string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedURL", ctx, bucketName, objectName, expiry, method)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedURL indicates an expected call of GeneratePresignedURL.
func (mr *MockStorageInterfaceMockRecorder) GeneratePresignedURL(ctx, bucketName, objectName, expiry, method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedURL", reflect.TypeOf((*MockStorageInterface)(nil).GeneratePresignedURL), ctx, bucketName, objectName, expiry, method)
}

// GetFileInfo mocks base method.
func (m *MockStorageInterface) GetFileInfo(ctx context.Context, bucketName, objectName string) (*storage.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", ctx, bucketName, objectName)
	ret0, _ := ret[0].(*storage.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockStorageInterfaceMockRecorder) GetFileInfo(ctx, bucketName, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockStorageInterface)(nil).GetFileInfo), ctx, bucketName, objectName)
}

// GetPresignedURL mocks base method.
func (m *MockStorageInterface) GetPresignedURL(ctx context.Context, bucketName, objectName string, expiry time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURL", ctx, bucketName, objectName, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL.
func (mr *MockStorageInterfaceMockRecorder) GetPresignedURL(ctx, bucketName, objectName, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockStorageInterface)(nil).GetPresignedURL), ctx, bucketName, objectName, expiry)
}

// ListFiles mocks base method.
func (m *MockStorageInterface) ListFiles(ctx context.Context, bucketName, prefix string) ([]*storage.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, bucketName, prefix)
	ret0, _ := ret[0].([]*storage.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockStorageInterfaceMockRecorder) ListFiles(ctx, bucketName, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockStorageInterface)(nil).ListFiles), ctx, bucketName, prefix)
}

// RemoveBucket mocks base method.
func (m *MockStorageInterface) RemoveBucket(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucket", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBucket indicates an expected call of RemoveBucket.
func (mr *MockStorageInterfaceMockRecorder) RemoveBucket(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucket", reflect.TypeOf((*MockStorageInterface)(nil).RemoveBucket), ctx, bucketName)
}

// TestConnection mocks base method.
func (m *MockStorageInterface) TestConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockStorageInterfaceMockRecorder) TestConnection(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockStorageInterface)(nil).TestConnection), ctx)
}

// UploadFile mocks base method.
func (m *MockStorageInterface) UploadFile(ctx context.Context, bucketName, objectName string, data []byte, contentType string) (*storage.UploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, bucketName, objectName, data, contentType)
	ret0, _ := ret[0].(*storage.UploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockStorageInterfaceMockRecorder) UploadFile(ctx, bucketName, objectName, data, contentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockStorageInterface)(nil).UploadFile), ctx, bucketName, objectName, data, contentType)
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetAccessKey mocks base method.
func (m *MockConfig) GetAccessKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccessKey indicates an expected call of GetAccessKey.
func (mr *MockConfigMockRecorder) GetAccessKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessKey", reflect.TypeOf((*MockConfig)(nil).GetAccessKey))
}

// GetEndpoint mocks base method.
func (m *MockConfig) GetEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEndpoint indicates an expected call of GetEndpoint.
func (mr *MockConfigMockRecorder) GetEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockConfig)(nil).GetEndpoint))
}

// GetRegion mocks base method.
func (m *MockConfig) GetRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockConfigMockRecorder) GetRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockConfig)(nil).GetRegion))
}

// GetSecretKey mocks base method.
func (m *MockConfig) GetSecretKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSecretKey indicates an expected call of GetSecretKey.
func (mr *MockConfigMockRecorder) GetSecretKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockConfig)(nil).GetSecretKey))
}

// IsSSLEnabled mocks base method.
func (m *MockConfig) IsSSLEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSSLEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSSLEnabled indicates an expected call of IsSSLEnabled.
func (mr *MockConfigMockRecorder) IsSSLEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSSLEnabled", reflect.TypeOf((*MockConfig)(nil).IsSSLEnabled))
}
